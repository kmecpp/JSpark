TYPES: int, dec, boolean, string. Extended: int64

IDEAS:


#################################



#################################

- RETURN THEN:

	private Object obj;

	def main(){
		return obj then obj = null;
	}
	
	VS.
	
	public static void main(){
		Object old = obj;
		obj = null;
		return old;
	}
	
	
	
#################################


- INCREMENT/DECREMENT TO N ??

	{
		n-- > 0; 
	}
	
	
	
#################################

- Extended for loop scope

	def test(int n){
		for 100 :: if(n % i == 0) :: c++;
	}
	return c;
	
	
#################################
	

- For loop syntax

	for 10 {
		println(i);
	}
	
	for i (0, 5){
		println(i); //0, 1, 2, 3, 4
	}
	
	for i (0, 10, 2){
		println(i); //0, 2, 4, 6, 8
	}


#################################

- Simultaneous var store and existence check

	if(Variable var = block.getVariable(target) != null){
	
	}
	
	if(Variable var = block.getVariable(target)){
	
	}
	
	while(String line = br.readLine()){
	
	}
		
#################################

- Null Values?

Have null but impossible to throw NPE?


#################################



case class Person (String name, int age);

class Cat(String name, int age){

    void praise(){
        println("Meow");
    }

}

/*

Ideas: Easy swapping of array elements


*/

static Main {

    void main() {
        n = input("Enter a number: ");
        i = [0-10] {

        }

        x = (n == 3 ? "Hi" : "Bye"); //No need for local variable type???

        print("Hello"[4]); //Prints 'o'
        print("Hello"[5]); //Exception
        print("Hello"[:3]); //Prints 'hel'
        print("Hello"[3:]); //Prints 'lo'

        print("Hello"[(5)]); //Prints '1', impossible to have out of bounds, circular

        if(n == 3, 4){ //test if n is 3 or 4

        }

        i = [1-10] -> i*(i+1)/2 {
            println(i);
        }
    }

    boolean isPrime(int n){
        return false if n % 2 != 0;

        i = [3-sqrt(n), 2] {
            return false if n | i; //The pipe symbol means divides
        }
        return true;
    }




    boolean isPrime(n) = n| length < 2


    /*
    Mathematical Functions:

    Divides: |
    Divisors: {|}

    0 and 1 == 0; //True


    sum(List)
    divisors(n):
    */




}


//Static Inheritance Example:

interface TokenText {

	public String getString();
	
	public static abstract TokenText[] getValues();

	public static TokenText fromString(String str){
		for(TokenText text : getValues()){
			if(text.getString().equals(str)){
				return text;
			}
		}
	}

}

enum Keyword implements TokenText {

	DEF,
	THIS,
	ETC,
	
	@Override
	public static Keyword[] getValues(){
		return values();
	}

}

static Main {

	def main(){
		Keyword.fromString("def"); //DEF
	}

}